#!/bin/bash
##############################################################################
# Adebar Â© 2014, 2015 by Itzchak Rehberg
# This is part of the Adebar project, see https://github.com/IzzySoft/Adebar
# Protected by the GPLv2
# ----------------------------------------------------------------------------
# library to deal with package data (apps)
##############################################################################

#
# Get app names by package names (if possible)
# $1: package name
# $2: whether to retrieve the app name if not found in cache
#
getAppname() {
  if [[ -z "${CACHEDIR}" ]]; then # not even cache available
    echo "$1"
    return
  fi
  if [[ -f "${CACHEDIR}/appnames/$1" ]]; then
    local name="$(cat "${CACHEDIR}/appnames/$1")"
    name="${name%"${name##*[![:space:]]}"}" # remove trailing spaces
    name="${name#"${name%%[![:space:]]*}"}" # remove leading spaces
    if [[ -z "${name}" ]]; then
      echo "$1"
    else
      echo "${name}"
    fi
    return
  fi
  # not found in cache: optionally call user script/function here
  if [[ ${2} -gt 0 && -n "${APPNAME_CMD}" ]]; then
    name="$(${APPNAME_CMD} $1)"
    if [[ "${name}" != "$1" ]]; then
      echo "${name}" > "${CACHEDIR}/appnames/$1"
    fi
    echo "${name}"
    return
  fi
  echo "$1"
}


#
# Collect app details via dumpsys
#
getAppDetails() {
  local P_BLOCK="none" # none|pkglist|pkg|disabled|enabled|perms
  local P_PKGNAME=""   # name of the currently processed package
  local tmpstring=""
  local P_SKIP=(userId sharedUser pkg resourcePath nativeLibraryPath versionCode targetSdk timeStamp signatures permissionsFixed pkgFlags applicationInfo)
  declare -A PK_CODEPATH
  declare -A PK_VERSION
  declare -A PK_DATADIR
  declare -A PK_SCREENSIZE
  declare -A PK_FIRSTINSTALL
  declare -A PK_LASTUPDATE
  declare -A PK_INSTALLERS    # per source
  PK_INSTALLERS[none]="unknown source"
  declare -A PK_INSTALLER     # per app
  declare -A PK_DISABLED      # list of components separated by spaces
  declare -A PK_FLAGS         # flags=[ SYSTEM HAS_CODE ALLOW_TASK_REPARENTING ALLOW_CLEAR_USER_DATA ALLOW_BACKUP LARGE_HEAP ]
  declare -A PK_USERS         # User 0:  installed=true stopped=false notLaunched=false enabled=0
  declare -A APP_INSTALL_SRC
  APP_INSTALL_SRC[org.fdroid.fdroid]="F-Droid"
  APP_INSTALL_SRC[cm.aptoide.pt]="Aptoide"
  APP_INSTALL_SRC[com.android.vending]="Google Play"
  APP_INSTALL_SRC[com.google.android.feedback]="Google Play (Feedback)"
  local PKGDUMP=$(tempfile)
  trap "rm -f -- '$PKGDUMP'" RETURN
  local SH_DISABLED="${OUTDIR}/deadReceivers.sh"

  doProgress "Generating app detail info"
  doProgress "- collecting data via dumpsys" 2
  adb ${ADBOPTS} shell "dumpsys package" |egrep -A99999 "^Packages:" |egrep -B99999 "^Shared users:" > "${PKGDUMP}"

  # Parsing dump
  doProgress "- parsing package dump" 2
  while IFS='' read zeile; do # no idea why, but some dump lines are terminated using CRLF
    case ${P_BLOCK} in
      none)
        [[ "$zeile" != "Packages:" ]] && continue;
        P_BLOCK="pkglist"
        doProgress "  - Found package list marker" 4
        continue;
        ;;

      pkglist)
        if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
          tmpstring="${zeile##*[}"                      # strip leading
          P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
          P_BLOCK="pkg"
          doProgress "  - Package: $P_PKGNAME" 4
          continue
        fi
        ;;

      pkg)
        tmpstring="${zeile%%=*}"
        tmpstring="${tmpstring##*[[:space:]]}"
        in_array $tmpstring "${P_SKIP[@]}" && continue
        [[ "$zeile" = "    grantedPermissions:" ]] && continue
        [[ "${zeile:0:6}" = "      " ]] && continue
        [[ -z "${zeile%%* }" ]] && break # end of package list is an empty line, sometimes with spaces
        case "$tmpstring" in
          "codePath")
            PK_CODEPATH[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +codePath: ${PK_CODEPATH[$P_PKGNAME]}" 5
            continue
            ;;
          "versionName")
            PK_VERSION[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +version: ${PK_VERSION[$P_PKGNAME]}" 5
            continue
            ;;
          "dataDir")
            PK_DATADIR[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +data: ${PK_DATADIR[$P_PKGNAME]}" 5
            continue
            ;;
          "supportsScreens")
            PK_SCREENSIZE[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +screens: ${PK_SCREENSIZE[$P_PKGNAME]}" 5
            continue
            ;;
          "firstInstallTime")
            PK_FIRSTINSTALL[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +firstinst: ${PK_FIRSTINSTALL[$P_PKGNAME]}" 5
            continue
            ;;
          "lastUpdateTime")
            PK_LASTUPDATE[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +lastup: ${PK_LASTUPDATE[$P_PKGNAME]}" 5
            continue
            ;;
          "installerPackageName")
            in_array "${zeile##*=}" "${PK_INSTALLERS[@]}" || { # setting up "used sources" to group by
              if [ -z "${APP_INSTALL_SRC[${zeile##*=}]}" ]; then
                PK_INSTALLERS[${zeile##*=}]="${zeile##*=}"
              else
                PK_INSTALLERS[${zeile##*=}]="${APP_INSTALL_SRC[${zeile##*=}]}"
              fi
            }
            PK_INSTALLER[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +installer: ${PK_INSTALLER[$P_PKGNAME]}" 5
            continue
            ;;
          "flags")
            PK_FLAGS[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +flags: ${PK_FLAGS[$P_PKGNAME]}" 5
            continue
            ;;
          *)
            if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
              tmpstring="${zeile##*[}"                      # strip leading
              P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
              doProgress "  - Package: $P_PKGNAME" 4
              continue
            fi
            if [[ "${zeile}" = "    disabledComponents:" ]]; then
              P_BLOCK="disabled"
              continue
            fi
            if [[ "${zeile}" = "    enabledComponents:" ]]; then
              P_BLOCK="enabled"
              continue
            fi
            if [[ "${zeile:0:8}" = "    User" ]]; then  # Android 4.2+ MultiUser info
              # '    User 0:  installed=true stopped=false notLaunched=false enabled=0'
              if [[ -z "${PK_USERS[$P_PKGNAME]}" ]]; then
                PK_USERS[$P_PKGNAME]="    + ${zeile:4}"
              else
                PK_USERS[$P_PKGNAME]+="\n    + ${zeile:4}"
              fi
              continue
            fi

            oops "pkg" "${LINENO}" "Unexpected: '$zeile'" 2
            ;;
        esac
        ;;

      "disabled") # disabled components of current pkg
        if [[ "${zeile:0:6}" = "      " ]]; then
          if [[ -z "${PK_DISABLED[$P_PKGNAME]}" ]]; then
            PK_DISABLED[$P_PKGNAME]="${zeile:6}"
          else
            PK_DISABLED[$P_PKGNAME]="${PK_DISABLED[$P_PKGNAME]} ${zeile:6}"
          fi
          continue
        fi
        if [[ "${zeile}" = "    grantedPermissions:" ]]; then
          P_BLOCK="perms"
          continue
        fi
        if [[ "${zeile}" = "    enabledComponents:" ]]; then
          P_BLOCK="enabled"
          continue
        fi
        if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
          tmpstring="${zeile##*[}"                      # strip leading
          P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
          P_BLOCK="pkg"
          doProgress "  - Package: $P_PKGNAME" 4
          continue
        fi

        oops "disabled" "${LINENO}" "$zeile" 2
        ;;

      "enabled") # enabled components of current pkg
        if [[ "${zeile:0:6}" = "      " ]]; then
          continue # we don't include enabled components
        fi
        if [[ "${zeile}" = "    grantedPermissions:" ]]; then
          P_BLOCK="perms"
          continue
        fi
        if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
          tmpstring="${zeile##*[}"                      # strip leading
          P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
          P_BLOCK="pkg"
          doProgress "  - Package: $P_PKGNAME" 4
          continue
        fi

        oops "enabled" "${LINENO}" "$zeile" 2
        ;;

      "perms")
        if [[ "${zeile:0:6}" = "      " ]]; then
          continue # we don't include permissions (yet)
        fi
        if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
          tmpstring="${zeile##*[}"                      # strip leading
          P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
          P_BLOCK="pkg"
          doProgress "  - Package: $P_PKGNAME" 4
          continue
        fi

        oops "perms" "${LINENO}" "$zeile" 2
        ;;
      *)
        ;;
    esac

  done < "${PKGDUMP}"

  echo -e "#!/bin/bash" > "${SH_DISABLED}"

  [[ ${MK_USERAPPS} -ne 0 ]] && _makeAppDoc "user"
  [[ ${MK_SYSAPPS}  -ne 0 ]] && _makeAppDoc "system"

  doProgress "- removing temporary dumpfile" 2
  rm -f "${PKGDUMP}"
}


#
# Create app documentation
# (called from getAppDetails())
# $1 = "user"|"system"
#
function _makeAppDoc() {
  local mdfile
  local apptype
  local applist
  case "${1,,}" in
    "user")
        doProgress "- generating userApps.md" 2
        mdfile="${DOCDIR}/userApps.md"
        apptype="User-Apps"
        applist=(${userApps[*]})
        echo -e "# Disable Components (${DEVICE_NAME})" >> "${SH_DISABLED}"
        _retrieveAppNames=1
        ;;
    "system")
        doProgress "- generating sysApps.md" 2
        mdfile="${DOCDIR}/sysApps.md"
        apptype="System-Apps"
        applist=(${sysApps[*]})
        echo -e "\n\n# Disable System Components" >> "${SH_DISABLED}"
        _retrieveAppNames=${MK_SYSAPPS_RETRIEVE_NAMES}
        ;;
    *) 
        oops "makeAppDoc" "${LINENO}" "We only know about user and system apps, but got asked for '$1'" 1
        return
        ;;
  esac

  echo "# Installed ${apptype} on ${DEVICE_NAME}" > "${mdfile}"
  echo "(As of $(date '+%Y-%m-%d %H:%M'))" >> "${mdfile}"
  declare -A PK_INFO
  for src in ${!PK_INSTALLERS[@]}; do
    PK_INFO[$src]=""
  done
  local CUR_INSTALLER
  local APPNAME
  for app in ${applist[@]}; do
    APPNAME=$(getAppname "${app}" $_retrieveAppNames)
    if [[ -z "${PK_INSTALLER[$app]}" ]]; then # no installer
      if [[ "${APPNAME}" = "${app}" ]]; then
        tmpstring="+ $app\n"
      else
        tmpstring="+ ${APPNAME} (${app})\n"
      fi
    elif [[ -n "${APP_MARKET_URL[${PK_INSTALLER[$app]}]}" ]]; then
      tmpstring="+ [${APPNAME}](${APP_MARKET_URL[${PK_INSTALLER[$app]}]/\%s/$app})\n"
    else # no web source
      if [[ "${APPNAME}" = "${app}" ]]; then
        tmpstring="+ $app\n"
      else
        tmpstring="+ ${APPNAME} (${app})\n"
      fi
    fi
    [[ -n "${PK_FIRSTINSTALL[$app]}" ]] && tmpstring+="    + first installed: ${PK_FIRSTINSTALL[$app]}\n"
    [[ -n "${PK_LASTUPDATE[$app]}" ]]   && tmpstring+="    + last updated: ${PK_LASTUPDATE[$app]}\n"
    [[ -n "${PK_VERSION[$app]}" ]]      && tmpstring+="    + installed version: ${PK_VERSION[$app]}\n"
    [[ -n "${PK_CODEPATH[$app]}" ]]     && tmpstring+="    + CodePath: \`${PK_CODEPATH[$app]}\`\n"
    [[ -n "${PK_DATADIR[$app]}" ]]      && tmpstring+="    + App data: \`${PK_DATADIR[$app]}\`\n"
    [[ -n "${PK_SCREENSIZE[$app]}" ]]   && tmpstring+="    + supported screen sizes: ${PK_SCREENSIZE[$app]}\n"
    [[ -n "${PK_FLAGS[$app]}" ]]        && tmpstring+="    + flags: ${PK_FLAGS[$app]}\n"
    [[ -n "${PK_USERS[$app]}" ]]        && tmpstring+="${PK_USERS[$app]}\n"
    [[ -n "${PK_DISABLED[$app]}" ]]     && {
      tmpstring+="    + disabled components:\n"
      echo "" >> "${SH_DISABLED}"
      for comp in ${PK_DISABLED[$app]}; do
        tmpstring+="        - $comp\n"
        echo "adb ${ADBOPTS} shell \"pm disable ${app}/${comp}\"" >> "${SH_DISABLED}"
      done
    }
    if [[ -z "${PK_INSTALLER[$app]}" ]]; then
      PK_INFO[none]+="$tmpstring\n"
    else
      CUR_INSTALLER="${PK_INSTALLER[$app]}"
      PK_INFO[$CUR_INSTALLER]+="$tmpstring\n"
    fi
  done
  for src in ${!PK_INSTALLERS[@]}; do
    [[ -n "${PK_INFO[$src]}" ]] && {
      echo -e "## Installed from ${PK_INSTALLERS[$src]} (installer: $src)\n" >> "${mdfile}"
      echo -e "${PK_INFO[$src]}\n" >> "${mdfile}"
    }
  done
}
