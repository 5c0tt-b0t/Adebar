#!/bin/bash
# Adebar
# (Android DEvice Backup And Restore)
# Creating scripts to backup and restore your apps, settings, and more
# Â© 2014 by Andreas Itzchak Rehberg
# Licensed using GPLv2 (see the file LICENSE which should have shipped with this)

# check parameters
if [ -z "$1" ]; then
  echo "Syntax: $0 <target_directory> [suffix]"
  exit 1
else
  OUTDIR="$1"
fi

# #################################[ Configuration ]###
#OUTDIR='.' # OUTDIR is specified via command line (mandatory parameter)
USERDIR="userApps"
SYSDIR="sysApps"
DEVICE_IP=
TIBU_PORT="8080"
TIBU_SDINT="/storage/INTERNAL/Storage-ALL.zip"
TIBU_SDEXT="/storage/SAMSUNG_EXT_SD_CARD/Storage-ALL.zip"
TIBU_BACKUPS="/TitaniumBackup-ALL.zip"
STORAGE_BASE=

# Features
MK_APPDISABLE=1
MK_USERBACKUP=1
MK_SYSBACKUP=1
MK_COMPONENTS=1
PULL_SETTINGS=1
MK_TIBU=1
MK_PKG_DATA=1
MK_INSTALLLOC=1
MK_DEVICEINFO=1


############################################[ Init ]###
BINDIR="${0%/*}"

# Checking for config file and sourcing it, if exists
if [ -d "${BINDIR}/config" ]; then
  if [ -f "${BINDIR}/config/$OUTDIR" ]; then # device-specific config
    . "${BINDIR}/config/$OUTDIR"
  elif [ -f "${BINDIR}/config/default" ]; then # default config
    . "${BINDIR}/config/default"
  fi
elif [ -f "${BINDIR}/config" ]; then # default config as of v3
  . "${BINDIR}/config"
fi

# check whether output directory shall have a suffix
if [ -n "$2" ]; then
  OUTDIR="${OUTDIR}${2}"
fi

# Check output directory and create it if it does not exist
if [ -n "${STORAGE_BASE}" ]; then
  OUTDIR="${STORAGE_BASE}/${OUTDIR}"
fi
if [ ! -d "$OUTDIR" ]; then
  mkdir -p "$OUTDIR" || {
    echo "Output directory does not exist, and I cannot create it. Sorry."
    echo
    exit
  }
fi


#########################################[ Helpers ]###
# Create script for disabled apps
getDisabled() {
  [ $MK_APPDISABLE -ne 1 ] && return

  local scriptname="${OUTDIR}/disable"
  echo "#!/bin/bash" > "${scriptname}"
  echo "# Disabled apps as of $(date '+%Y-%m-%d %H:%M')" >> "${scriptname}"
  echo >> "${scriptname}"

  for app in $(adb shell "pm list packages -d"); do
    app=$(echo $app | tr -d '\r' | awk -F : '{print $2}')
    echo "adb shell \"pm disable $app\"" >> "${scriptname}"
  done

  chmod u+x "${scriptname}"
}


# Create script to backup all user-apps
getUserAppBackup() {
  [ $MK_USERBACKUP -ne 1 ] && return

  local backupscript="$OUTDIR/userbackup"
  local restorescript="$OUTDIR/userrestore"
  echo "#!/bin/bash" > "$backupscript"
  echo "# Backup script as of $(date '+%Y-%m-%d %H:%M')" >> "$backupscript"
  echo "# Backs up all user apps including their .apk files and data" >> "$backupscript"
  echo "# Feel free to comment out/remove apps you don't want/need to be backed up." >> "$backupscript"
  echo  >> "$backupscript"
  echo "[ ! -d \"${USERDIR}\" ] && mkdir \"${USERDIR}\"" >> "$backupscript"
  echo >> "$backupscript"

  echo "#!/bin/bash" > "$restorescript"
  echo "# Restore script as of $(date '+%Y-%m-%d %H:%M')" >> "$restorescript"
  echo "# Restores all app backups. Comment out (or delete) those you do not wish to restore." >> "$restorescript"
  echo  >> "$restorescript"

  for app in $(adb shell "pm list packages -3"); do
    app=$(echo $app | tr -d '\r' | awk -F : '{print $2}')
    echo -e "adb backup -f \"${USERDIR}/${app}.ab\" -apk $app" >> "$backupscript"
    echo "sleep 1" >> "$backupscript" # prevent ADB daemon from being "blocked" (e.g. on LG P880)
    echo -e "adb restore \"${USERDIR}/${app}.ab\"" >> "$restorescript"
  done

  chmod u+x "$backupscript" "$restorescript"
}


# Create script to backup all system-app data
getSystemAppBackup() {
  [ $MK_USERBACKUP -ne 1 ] && return

  local backupscript="$OUTDIR/sysbackup"
  local restorescript="$OUTDIR/sysrestore"
  echo "#!/bin/bash" > "$backupscript"
  echo "# Backup script as of $(date '+%Y-%m-%d %H:%M')" >> "$backupscript"
  echo "# Backs up the data (not the .apk files) of all your system apps" >> "$backupscript"
  echo "# Feel free to comment out/remove apps you don't want/need to be backed up." >> "$backupscript"
  echo  >> "$backupscript"
  echo "[ ! -d \"${SYSDIR}\" ] && mkdir \"${SYSDIR}\"" >> "$backupscript"
  echo >> "$backupscript"

  echo "#!/bin/bash" > "$restorescript"
  echo "# Restore script as of $(date '+%Y-%m-%d %H:%M')" >> "$restorescript"
  echo -e "# Restores all system app data backups.\n# DRAGONS HERE: this might fail if you restore to a different\n# device/Android version/ROM, so be careful!\n# Comment out/delete what you do not wish to restore." >> "$restorescript"
  echo  >> "$restorescript"

  for app in $(adb shell "pm list packages -s"); do
    app=$(echo $app | tr -d '\r' | awk -F : '{print $2}')
    prep=""
    if [ "$app" = "com.android.sharedstoragebackup" ]; then # shared storage
      prep="  "
      echo >> "$backupscript"
      echo  >> "$restorescript"
      echo -e "echo \"The following command will download 'shared storage' (i.e. contents of the SD card(s)).\"\necho \"This might take quite a while, depending on what you've stored there.\"" >> "$backupscript"
      echo -e "echo \"The following command will restore 'shared storage' (i.e. contents of the SD card(s)).\"\necho \"This might take quite a while, depending on how big your backup from it was.\"" >> "$restorescript"
      echo -e "read -n 1 -p \"Do you wish to run this command now? (Y/n) \" res\necho\nres=\$(echo \$res|tr [:upper:] [:lower:])\nif [ \"\$res\" = \"y\" ]; then" >> "$backupscript"
      echo -e "read -n 1 -p \"Do you wish to run this command now? (Y/n) \" res\necho\nres=\$(echo \$res|tr [:upper:] [:lower:])\nif [ \"\$res\" = \"y\" ]; then" >> "$restorescript"
    else
      prep=""
    fi
    echo -e "${prep}adb backup -f \"${SYSDIR}/${app}.ab\" -noapk $app" >> "$backupscript"
    echo "${prep}sleep 1" >> "$backupscript" # prevent ADB daemon from being "blocked" (e.g. on LG P880)
    echo -e "${prep}adb restore \"${SYSDIR}/${app}.ab\"" >> "$restorescript"
    if [ "$app" = "com.android.sharedstoragebackup" ]; then
      echo -e "else\n echo \"Skipping shared storage\"\nfi" >> "$backupscript"
      echo -e "else\n echo \"Skipping shared storage\"\nfi" >> "$restorescript"
      echo >> "$backupscript"
      echo  >> "$restorescript"
    fi
  done

  chmod u+x "$backupscript" "$restorescript"
}

# Retrieve packages.xml (required in different places)
pullPackagesXML() {
  [ $((${MK_COMPONENTS} + ${MK_PKG_DATA})) -eq 0 ] && return
  adb pull /data/system/packages.xml $OUTDIR/packages.xml
}

# Get disabled broadcast receivers
# Requires xml2 package (apt-get install xml2)
getFrozenComponents() {
  [ $MK_COMPONENTS -ne 1 -o ! -f "${OUTDIR}/packages.xml" ] && return
  [ -n "$(which xml2)" ] && xml2 < $OUTDIR/packages.xml |grep "disabled-components/item/@name" > "$OUTDIR/deadreceivers"
}

# Get the default install-location
getInstallLoc() {
  [ $MK_INSTALLLOC -ne 1 ] && return
  foo="$(adb shell pm get-install-location)"
  echo "pm set-install-location ${foo//[^0-9]/}" > "$OUTDIR/defaultInstallLoc"
  chmod u+x "$OUTDIR/defaultInstallLoc"
}

# Get device info
getDeviceInfo() {
  [ $MK_DEVICEINFO -ne 1 ] && return
  local item=""

  echo "# Device Information" > "${OUTDIR}/deviceInfo.md"

  adb pull /system/build.prop "${OUTDIR}/build.prop"
  if [ $? -eq 0 ]; then # successfully pulled the build.prop
    echo  >> "${OUTDIR}/deviceInfo.md"
    echo "## Device and ROM properties (from \`build.prop\`)" >> "${OUTDIR}/deviceInfo.md"
    while read zeile; do
      zeile="${zeile//=/ }"
      foo=($zeile)
      case ${foo[0]} in
        "ro.build.version.sdk") local sdk=${foo[1]} ;;
        "ro.build.version.release") local aver=${foo[1]} ;;
        "ro.modversion") local modver=${foo[1]} ;;         # ro.modversion=10-20121228-NIGHTLY-milestone2
        "ro.product.manufacturer") local manu=${foo[1]} ;; # ro.product.manufacturer=Motorola
        "ro.product.model") local model=${foo[1]} ;;       # ro.product.model=A953
        "ro.product.device") local device=${foo[1]} ;;     # ro.product.device=milestone2
        "ro.product.cpu.abi") local cpu=${foo[1]} ;;       # ro.product.cpu.abi=armeabi-v7a
        "ro.product.locale.language") local lang=${foo[1]} ;; # ro.product.locale.language=en
        "ro.product.locale.region") local region=${foo[1]} ;; # ro.product.locale.region=US
        "ro.sf.lcd_density") local density=${foo[1]} ;;    # ro.sf.lcd_density=240
        "net.dns1") local dns1=${foo[1]} ;;                # net.dns1=8.8.8.8
        "net.dns2") local dns2=${foo[1]} ;;
      esac
    done < "${OUTDIR}/build.prop"
    echo "* Manufacturer: ${manu}" >> "${OUTDIR}/deviceInfo.md"
    echo "* Model: ${model} (${device})" >> "${OUTDIR}/deviceInfo.md"
    echo "* CPU: ${cpu}" >> "${OUTDIR}/deviceInfo.md"
    echo "* Screen density: ${density}" >> "${OUTDIR}/deviceInfo.md"
    echo "* SDK/Android version: ${sdk}/${aver}" >> "${OUTDIR}/deviceInfo.md"
    [ -n "$modver" ] && echo "* Mod: ${modver}" >> "${OUTDIR}/deviceInfo.md"
    echo "* Language: ${lang}_${region}" >> "${OUTDIR}/deviceInfo.md"
    [ -n "${dns1}${dns2}" ] && echo "* Default DNS server: ${dns1}/${dns2}" >> "${OUTDIR}/deviceInfo.md"
    # ro.product.brand=MOTO
    # ro.product.name=A953_DFP
    # ro.product.board=milestone2
    # ro.product.cpu.abi2=armeabi
  fi

  echo  >> "${OUTDIR}/deviceInfo.md"
  echo "## Device features" >> "${OUTDIR}/deviceInfo.md"
  for feature in $(adb shell "pm list features"); do
    item=$(echo $feature | tr -d '\r' | awk -F : '{print $2}')
    echo "* $item" >> "${OUTDIR}/deviceInfo.md"
  done
}


# Get settings
# includes WiFi APs etc.
getSettings() {
  [ $PULL_SETTINGS -ne 1 ] && return

  adb pull /data/misc/wifi/wpa_supplicant.conf $OUTDIR/wpa_supplicant.conf
  # SMS/MMS ?
  # CallLog ?
  # ?
}


# Create script to download SDCard Contents and TiBu Backups via TiBu WebServer
getTibu() {
  [ $MK_TIBU -ne 1 ] && return
  [ -z "${DEVICE_IP}" ] && return

  local scriptname="${OUTDIR}/tibu"
  echo "#!/bin/bash" > "${scriptname}"
  echo "# Download contents of external/internal SDCard and Backups via TitaniumBackups WebServer" >> "${scriptname}"
  echo "# Make sure your device is connected to your local WiFi, and you've enabled TiBu's WebServer" >> "${scriptname}"
  echo "# The latter can be done from within TiBu via the menu" >> "${scriptname}"
  echo "# As usual: comment out the components you do not want/need :)" >> "${scriptname}"
  echo  >> "${scriptname}"
  timestamp="$(date '+%Y%m%d_%H%M')"
  echo "wget -O sdinternal_${timestamp}.zip http://${DEVICE_IP}:${TIBU_PORT}${TIBU_SDINT}" >> "${scriptname}"
  echo "wget -O sdexternal_${timestamp}.zip http://${DEVICE_IP}:${TIBU_PORT}${TIBU_SDEXT}" >> "${scriptname}"
  echo "wget -O tibu_backups_${timestamp}.zip http://${DEVICE_IP}:${TIBU_PORT}${TIBU_BACKUPS}" >> "${scriptname}"
  chmod u+x "${scriptname}"
}


############################################[ Main ]###
pullPackagesXML
getDisabled
getUserAppBackup
getSystemAppBackup
getFrozenComponents
getInstallLoc
getDeviceInfo
getSettings
getTibu
[ $MK_PKG_DATA -ne 0 -a -f "${OUTDIR}/packages.xml" -a -f "/usr/bin/php" ] && ./getPkgData.php "$OUTDIR"

exit


######################################[ References ]###
# pm list packages [options] <FILTER>
# options:
#    -f: See their associated file.
#    -d: Filter to only show disabled packages.
#    -e: Filter to only show enabled packages.
#    -s: Filter to only show system packages.
#    -3: Filter to only show third party packages.
#    -i: See the installer for the packages.
#    -u: Also include uninstalled packages.
#    --user <USER_ID>: The user space to query.
#
# disable a component (e.g. BroadcastReceiver): pm disable com.example.com.testapp/.TestActivity
#
# adb pull /data/system/packages.list packages.list
# apps with UID/GID and app path
#
# adb pull /data/system/packages.xml packages.xml
# apps with permissions, intents, etc.:
#
